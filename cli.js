#!/usr/bin/env node

import { data } from './src/data/data.js';
import { styleText } from 'node:util';

const colors = {
    title: 'cyan',
    success: 'green',
    error: 'redBright',
    warning: 'yellow',
    info: 'blue',
    highlight: 'magenta'
};

const { argv: [, , command, ...args] } = process;

const getPropertiesByYear = year => data[year] || [];

const searchProperties = searchText => {
    const searchLower = searchText.toLowerCase();
    return Object.entries(data).flatMap(([year, properties]) =>
        properties
            .filter(property => property.name.toLowerCase().includes(searchLower))
            .map(property => ({ ...property, year: +year }))
    );
};

const displayProperties = (properties, title) => {
    console.log(`\n${styleText(colors.title, title)} ${styleText(colors.info, `(–Ω–∞–π–¥–µ–Ω–æ: ${properties.length})`)}`);

    if (properties.length === 0) {
        console.log(styleText(colors.warning, '–°–≤–æ–π—Å—Ç–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã'));
        return;
    }

    console.log(styleText(colors.highlight, '‚îÄ'.repeat(80)));

    properties.forEach((property, index) => {
        const { name, type = 'N/A', date = 'N/A', mdnUrl, specUrl } = property;

        console.log(`${styleText(colors.highlight, `${index + 1}.`)} ${styleText(colors.title, name)}`);
        console.log(`   ${styleText(colors.info, '–¢–∏–ø:')} ${type} | ${styleText(colors.info, '–î–∞—Ç–∞:')} ${date}`);

        if (mdnUrl) console.log(`   ${styleText(colors.success, 'MDN:')} ${mdnUrl}`);

        if (specUrl?.length) {
            const urls = Array.isArray(specUrl) ? specUrl : [specUrl];
            urls.forEach((url, i) => {
                const label = urls.length > 1 ? `–°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è ${i + 1}` : '–°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è';
                console.log(`   ${styleText(colors.warning, label)}: ${url}`);
            });
        }
        console.log('');
    });
};

const showHelp = () => {
    console.log(`
${styleText(colors.title, 'üìã CSS Properties CLI - –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –ø–æ CSS —Å–≤–æ–π—Å—Ç–≤–∞–º')}

${styleText(colors.info, '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:')}
  npx css-properties-list <–∫–æ–º–∞–Ω–¥–∞> [—Ñ–ª–∞–≥–∏]

${styleText(colors.info, '–ö–æ–º–∞–Ω–¥—ã:')}
  ${styleText(colors.highlight, 'list')}                    –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ CSS —Å–≤–æ–π—Å—Ç–≤

${styleText(colors.info, '–§–ª–∞–≥–∏:')}
  ${styleText(colors.highlight, '--year, -y <–≥–æ–¥>')}       –ü–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ–π—Å—Ç–≤–∞ –∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –≥–æ–¥
  ${styleText(colors.highlight, '--search, -s <—Ç–µ–∫—Å—Ç>')}   –ù–∞–π—Ç–∏ —Å–≤–æ–π—Å—Ç–≤–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é

${styleText(colors.info, '–ü—Ä–∏–º–µ—Ä—ã:')}
  npx css-properties-list list --year 2007
  npx css-properties-list list -y 2007
  npx css-properties-list list --search border
  npx css-properties-list list -s border
  npx css-properties-list list

${styleText(colors.info, '–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏:')}
  npx css-properties-list --help
  npx css-properties-list -h
`);
};

const main = () => {
    if (!args.length || args.includes('--help') || args.includes('-h')) {
        showHelp();
        return;
    }

    if (['-y', '-s'].includes(command)) {
        console.log(styleText(colors.error, `‚ùå –û—à–∏–±–∫–∞: —Ñ–ª–∞–≥ ${command} –¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å –∫–æ–º–∞–Ω–¥–æ–π list`));
        console.log(styleText(colors.info, '–ü—Ä–∏–º–µ—Ä: npx css-properties-list list -y 2007'));
        showHelp();
        return;
    }

    if (command === 'list') {
        const flags = {
            year: args.findIndex(arg => ['--year', '-y'].includes(arg)),
            search: args.findIndex(arg => ['--search', '-s'].includes(arg))
        };

        if (flags.year !== -1 && args[flags.year + 1]) {
            const year = args[flags.year + 1];
            const properties = getPropertiesByYear(year);
            displayProperties(properties, `CSS —Å–≤–æ–π—Å—Ç–≤–∞ –∑–∞ ${year} –≥–æ–¥`);
            return;
        }

        if (flags.search !== -1 && args[flags.search + 1]) {
            const searchText = args[flags.search + 1];
            const properties = searchProperties(searchText);
            displayProperties(properties, `–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ "${searchText}"`);
            return;
        }

        const allProperties = Object.entries(data).flatMap(([year, properties]) =>
            properties.map(property => ({ ...property, year: +year }))
        ).toSorted((a, b) => a.year - b.year);

        const limitedProperties = allProperties.slice(0, 20);
        displayProperties(limitedProperties, 'CSS —Å–≤–æ–π—Å—Ç–≤–∞ (–ø–µ—Ä–≤—ã–µ 20)');

        if (allProperties.length > 20) {
            console.log(`\n... –∏ –µ—â–µ ${allProperties.length - 20} —Å–≤–æ–π—Å—Ç–≤`);
            console.log('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–ª–∞–≥–∏ --year –∏–ª–∏ --search –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞');
        }
        return;
    }

    console.log(styleText(colors.error, `‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: ${command}`));
    showHelp();
};

main();
