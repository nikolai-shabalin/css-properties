#!/usr/bin/env node

import { data } from './src/data/data.js';
import { styleText } from 'node:util';

const colors = {
    title: 'cyan',
    success: 'green',
    error: 'redBright',
    warning: 'yellow',
    info: 'blue',
    highlight: 'magenta',
    reset: 'reset'
};

const args = process.argv.slice(2);
const command = args[0];

function getPropertiesByYear(year) {
    if (!data[year]) {
        console.log(styleText(colors.error, `‚ùå –°–≤–æ–π—Å—Ç–≤–∞ –∑–∞ ${year} –≥–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã`));
        return [];
    }
    return data[year];
}

function searchProperties(searchText) {
    const results = [];
    const searchLower = searchText.toLowerCase();

    for (const [year, properties] of Object.entries(data)) {
        for (const property of properties) {
            if (property.name.toLowerCase().includes(searchLower)) {
                results.push({
                    ...property,
                    year: parseInt(year)
                });
            }
        }
    }

    return results;
}

function displayProperties(properties, title) {
    if (properties.length === 0) {
        console.log(`\n${styleText(colors.title, title)}`);
        console.log(styleText(colors.warning, '–°–≤–æ–π—Å—Ç–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã'));
        return;
    }

    console.log(`\n${styleText(colors.title, title)} ${styleText(colors.info, `(–Ω–∞–π–¥–µ–Ω–æ: ${properties.length})`)}`);
    console.log(styleText(colors.highlight, '‚îÄ'.repeat(80)));
                properties.forEach((property, index) => {
        const type = property.type || 'N/A';
        const date = property.date || 'N/A';

        console.log(`${styleText(colors.highlight, `${index + 1}.`)} ${styleText(colors.title, property.name)}`);
        console.log(`   ${styleText(colors.info, '–¢–∏–ø:')} ${type} | ${styleText(colors.info, '–î–∞—Ç–∞:')} ${date}`);
        if (property.mdnUrl) {
            console.log(`   ${styleText(colors.success, 'MDN:')} ${property.mdnUrl}`);
        }
        if (property.specUrl && property.specUrl.length > 0) {
            if (Array.isArray(property.specUrl)) {
                property.specUrl.forEach((url, i) => {
                    const specLabel = property.specUrl.length > 1 ? `–°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è ${i + 1}` : '–°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è';
                    console.log(`   ${styleText(colors.warning, specLabel)}: ${url}`);
                });
            } else {
                console.log(`   ${styleText(colors.warning, '–°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è:')} ${property.specUrl}`);
            }
        }
        console.log('');
    });
}

function showHelp() {
    console.log(`
${styleText(colors.title, 'üìã CSS Properties CLI - –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –ø–æ CSS —Å–≤–æ–π—Å—Ç–≤–∞–º')}

${styleText(colors.info, '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:')}
  npx cssp <–∫–æ–º–∞–Ω–¥–∞> [—Ñ–ª–∞–≥–∏]

${styleText(colors.info, '–ö–æ–º–∞–Ω–¥—ã:')}
  ${styleText(colors.highlight, 'list')}                    –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ CSS —Å–≤–æ–π—Å—Ç–≤

${styleText(colors.info, '–§–ª–∞–≥–∏:')}
  ${styleText(colors.highlight, '--year, -y <–≥–æ–¥>')}       –ü–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ–π—Å—Ç–≤–∞ –∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –≥–æ–¥
  ${styleText(colors.highlight, '--search, -s <—Ç–µ–∫—Å—Ç>')}   –ù–∞–π—Ç–∏ —Å–≤–æ–π—Å—Ç–≤–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é

${styleText(colors.info, '–ü—Ä–∏–º–µ—Ä—ã:')}
  npx cssp list --year 2007
  npx cssp list -y 2007
  npx cssp list --search border
  npx cssp list -s border
  npx cssp list

${styleText(colors.info, '–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏:')}
  npx cssp --help
  npx cssp -h
`);
}

function main() {
    // –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É –µ—Å–ª–∏ –Ω–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∏–ª–∏ –µ—Å—Ç—å --help –∏–ª–∏ -h
    if (args.length === 0 || args.includes('--help') || args.includes('-h')) {
        showHelp();

        return;
    }

    if (command === '-y' || command === '-s') {
        console.log(styleText(colors.error, `‚ùå –û—à–∏–±–∫–∞: —Ñ–ª–∞–≥ ${command} –¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å –∫–æ–º–∞–Ω–¥–æ–π list`));
        console.log(styleText(colors.info, '–ü—Ä–∏–º–µ—Ä: npx cssp list -y 2007'));
        showHelp();
        return;
    }

    if (command === 'list') {
        const yearFlag = args.indexOf('--year');
        const yearFlagShort = args.indexOf('-y');
        const searchFlag = args.indexOf('--search');
        const searchFlagShort = args.indexOf('-s');

        if ((yearFlag !== -1 && args[yearFlag + 1]) || (yearFlagShort !== -1 && args[yearFlagShort + 1])) {
            const yearIndex = yearFlag !== -1 ? yearFlag : yearFlagShort;
            const year = args[yearIndex + 1];
            const properties = getPropertiesByYear(year);
            displayProperties(properties, `CSS —Å–≤–æ–π—Å—Ç–≤–∞ –∑–∞ ${year} –≥–æ–¥`);
            return;
        }

        if ((searchFlag !== -1 && args[searchFlag + 1]) || (searchFlagShort !== -1 && args[searchFlagShort + 1])) {
            const searchIndex = searchFlag !== -1 ? searchFlag : searchFlagShort;
            const searchText = args[searchIndex + 1];
            const properties = searchProperties(searchText);
            displayProperties(properties, `–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ "${searchText}"`);
            return;
        }

        const allProperties = [];
        for (const [year, properties] of Object.entries(data)) {
            for (const property of properties) {
                allProperties.push({
                    ...property,
                    year: parseInt(year)
                });
            }
        }

        allProperties.sort((a, b) => a.year - b.year);

        const limitedProperties = allProperties.slice(0, 20);
        displayProperties(limitedProperties, 'CSS —Å–≤–æ–π—Å—Ç–≤–∞ (–ø–µ—Ä–≤—ã–µ 20)');

        if (allProperties.length > 20) {
            console.log(`\n... –∏ –µ—â–µ ${allProperties.length - 20} —Å–≤–æ–π—Å—Ç–≤`);
            console.log('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–ª–∞–≥–∏ --year –∏–ª–∏ --search –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞');
        }

        return;

    }

    console.log(styleText(colors.error, `‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: ${command}`));
    showHelp();
}

// –ó–∞–ø—É—Å–∫ CLI
main();
