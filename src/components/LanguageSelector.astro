---
import { languages, ui } from '../i18n/ui';
import { getLangFromUrl, useTranslations } from '../i18n/utils';

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);

const languageMeta = {
  ru: { flag: 'üá∑üá∫', code: 'ru' },
  en: { flag: 'üá¨üáß', code: 'en' },
  es: { flag: 'üá™üá∏', code: 'es' },
  fr: { flag: 'üá´üá∑', code: 'fr' },
  de: { flag: 'üá©üá™', code: 'de' },
  it: { flag: 'üáÆüáπ', code: 'it' },
  pt: { flag: 'üáµüáπ', code: 'pt' },
  ja: { flag: 'üáØüáµ', code: 'ja' },
  ko: { flag: 'üá∞üá∑', code: 'ko' },
  zh: { flag: 'üá®üá≥', code: 'zh' },
};

// –ü–µ—Ä–µ–¥–∞–µ–º —è–∑—ã–∫–∏ –≤ –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–π —Å–∫—Ä–∏–ø—Ç
const languagesJson = JSON.stringify(languages);
---

<div class="language-selector">
  <select
    class="language-select"
    aria-label={t('language.selector.label')}
  >
    {Object.entries(languages).map(([code]) => (
      <option value={code} selected={code === lang}>
        {languageMeta[code]?.flag} {languageMeta[code]?.code}
      </option>
    ))}
  </select>
</div>

<script define:vars={{ languagesJson }}>
  // –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫–∏ –∏–∑ —Å–µ—Ä–≤–µ—Ä–Ω–æ–≥–æ –∫–æ–¥–∞
  const languages = JSON.parse(languagesJson);

    document.addEventListener('DOMContentLoaded', function() {
    const select = document.querySelector('.language-select');
    if (select) {
      select.addEventListener('change', function() {
        var lang = select.value;
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º Web API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å URL
        const url = new URL(window.location.href);
        const pathSegments = url.pathname.split('/').filter(Boolean);
        const allLangs = Object.keys(languages);

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∞–∑–æ–≤—ã–π –ø—É—Ç—å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
        let basePath = '';
        if (window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1') {
          // –õ–æ–∫–∞–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞
          basePath = '';
        } else {
          // GitHub Pages
          basePath = '/css-properties';
        }

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —è–∑—ã–∫ –∏–∑ URL
        let currentLang = 'ru'; // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        let langIndex = -1;

        // –ò—â–µ–º –∫–æ–¥ —è–∑—ã–∫–∞ –≤ —Å–µ–≥–º–µ–Ω—Ç–∞—Ö –ø—É—Ç–∏
        for (let i = 0; i < pathSegments.length; i++) {
          if (allLangs.includes(pathSegments[i])) {
            currentLang = pathSegments[i];
            langIndex = i;
            break;
          }
        }

        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π URL
        const newUrl = new URL(window.location.href);

        // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫
        if (lang === 'ru') {
          // –£–±–∏—Ä–∞–µ–º –∫–æ–¥ —è–∑—ã–∫–∞ –∏–∑ URL, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
          if (langIndex !== -1) {
            pathSegments.splice(langIndex, 1);
          }
          // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ css-properties
          const filteredSegments = pathSegments.filter(segment => segment !== 'css-properties');
          const newPath = basePath + (filteredSegments.length > 0 ? '/' + filteredSegments.join('/') : '/');
          newUrl.pathname = newPath;
        } else {
          // –î–ª—è –¥—Ä—É–≥–∏—Ö —è–∑—ã–∫–æ–≤ –¥–æ–±–∞–≤–ª—è–µ–º –∏–ª–∏ –∑–∞–º–µ–Ω—è–µ–º –∫–æ–¥ —è–∑—ã–∫–∞
          if (langIndex === -1) {
            // –ï—Å–ª–∏ —Å–µ–π—á–∞—Å —Ä—É—Å—Å–∫–∏–π, –¥–æ–±–∞–≤–ª—è–µ–º –∫–æ–¥ —è–∑—ã–∫–∞ –ø–æ—Å–ª–µ –±–∞–∑–æ–≤–æ–≥–æ –ø—É—Ç–∏
            // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ css-properties
            const filteredSegments = pathSegments.filter(segment => segment !== 'css-properties');
            const newPath = basePath + '/' + lang + (filteredSegments.length > 0 ? '/' + filteredSegments.join('/') : '/');
            newUrl.pathname = newPath;
          } else {
            // –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –∫–æ–¥ —è–∑—ã–∫–∞, –∑–∞–º–µ–Ω—è–µ–º –µ–≥–æ
            pathSegments[langIndex] = lang;
            // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ css-properties
            const filteredSegments = pathSegments.filter(segment => segment !== 'css-properties');
            const newPath = basePath + '/' + filteredSegments.join('/');
            newUrl.pathname = newPath;
          }
        }

        window.location.href = newUrl.toString();
      });
    }
  });
</script>

<style>
  .language-selector {
    position: fixed;
    top: 10px;
    right: 10px;
    z-index: 1000;
  }

  .language-select {
    padding: 4px 8px;
    border: 1px solid var(--color-accent);
    border-radius: 6px;
    background: var(--color-background-overlay);
    color: var(--color-text);
    font-size: 12px;
    cursor: pointer;
    backdrop-filter: blur(10px);
    transition: all 0.3s ease;
    min-width: 80px;
    max-width: 90px;
  }

  .language-select:hover {
    background: var(--color-background-section);
    border-color: var(--color-primary);
    transform: scale(1.05);
  }

  .language-select:focus {
    outline: none;
    border-color: var(--color-primary);
    box-shadow: 0 0 0 2px rgb(var(--color-primary-rgb), 0.2);
  }

  .language-select option {
    background: var(--color-background-item);
    color: var(--color-text);
    font-size: 12px;
  }

  /* –°—Ç–∏–ª–∏ –¥–ª—è —Ç—ë–º–Ω–æ–π —Ç–µ–º—ã */
  @media (prefers-color-scheme: dark) {
    .language-select {
      background: var(--color-background-item);
      border-color: var(--color-accent);
      color: var(--color-text);
      backdrop-filter: blur(10px);
    }

    .language-select:hover {
      background: var(--color-background-section);
      border-color: var(--color-primary);
    }

    .language-select option {
      background: var(--color-background-item);
      color: var(--color-text);
    }

    .language-select option:hover {
      background: var(--color-background-section);
    }
  }
</style>
