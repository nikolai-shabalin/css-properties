---
export type PropertyProp = {
  name: string;
  date: string;
  type: string;
  parent?: string | null;
  specUrl?: string;
  mdnUrl?: string;
  year: string;
}

interface Props {
  property: PropertyProp;
}

const { property } = Astro.props;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∫–æ–Ω–∫–∏ –ø–æ —Ç–∏–ø—É —Å–≤–æ–π—Å—Ç–≤–∞
function getPropertyIcon(type: string, name: string) {
  if (type === '@') return 'üìã';
  if (name.includes('color') || name.includes('background')) return 'üé®';
  if (name.includes('font') || name.includes('text')) return 'üìù';
  if (name.includes('animation') || name.includes('transition')) return '‚ö°';
  if (name.includes('grid') || name.includes('flex')) return 'üìê';
  if (name.includes('border') || name.includes('outline')) return 'üî≥';
  if (name.includes('margin') || name.includes('padding')) return 'üìè';
  if (name.includes('position') || name.includes('top') || name.includes('left')) return 'üìç';
  return '‚öôÔ∏è';
}

const propertyIcon = getPropertyIcon(property.type, property.name);
---

<article class="property" style={{ '--icon': `'${propertyIcon}'` }}>
  <div class="property-info">
    <h3 class="property-name">
      {property.parent ? (
        <>
          <span class="property-parent">{property.parent}</span>
          <span class="property-separator">‚Üí</span>
          <span class="property-main">{property.name}</span>
        </>
      ) : property.type === '@' ? (
        <>
          <span class="property-at">@</span>
          <span class="property-main">{property.name}</span>
        </>
      ) : (
        <>
          <span class="property-type">{property.type}</span>
          <span class="property-separator">:</span>
          <span class="property-main">{property.name}</span>
        </>
      )}
    </h3>
    <time class="property-date" datetime={property.date}>
      {new Date(property.date).toLocaleDateString('ru-RU', {
        day: 'numeric',
        month: 'long',
        year: 'numeric'
      })}
    </time>
  </div>

  <div class="property-links">
    {property.specUrl && (
      <a href={property.specUrl} class="property-link spec-link" target="_blank" rel="noopener">
        üìÑ –°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è
      </a>
    )}
    {property.mdnUrl && (
      <a href={property.mdnUrl} class="property-link mdn-link" target="_blank" rel="noopener">
        üìö MDN
      </a>
    )}
    <a href={`https://caniuse.com/?search=${property.name}`} class="property-link caniuse-link" target="_blank" rel="noopener">
      üåê Can I Use
    </a>
  </div>
</article>

<style>
  .property {
    background: var(--color-background-item);
    border: 1px solid rgb(148 163 184 / 15%);
    border-radius: var(--border-radius-lg);
    box-shadow: var(--shadow-sm);
    transition: transform var(--transition-normal), box-shadow var(--transition-normal), border-color var(--transition-normal);
    overflow: hidden;
    display: grid;
    grid-template-columns: min-content 1fr;
    grid-template-rows: 1fr;
    gap: 2rem 1rem;
    position: relative;
    padding: 1.5rem;
  }

  .property::before {
    content: '';
    position: absolute;
    inset: 0 0 auto;
    height: 3px;
    background: linear-gradient(90deg, var(--color-primary), var(--color-secondary));
    opacity: 0%;
    transition: opacity var(--transition-normal);
  }

  .property::after {
    content: var(--icon);
    font-size: 1.5rem;
    background: var(--color-primary);
    width: 2.5rem;
    height: 2.5rem;
    border-radius: var(--border-radius-md);
    display: flex;
    align-items: center;
    justify-content: center;
    flex-shrink: 0;
    box-shadow: var(--shadow-sm);
    order: -1;
  }

  .property:hover {
    transform: translateY(-4px);
    box-shadow: var(--shadow-lg);
    border-color: rgb(79 70 229 / 30%);
  }

  .property:hover::before {
    opacity: 100%;
  }

  .property-info {
    flex: 1;
    min-width: 0;
  }

  .property-name {
    font-size: 1rem;
    font-weight: 600;
    margin: 0 0 0.5rem;
    color: var(--color-text);
    line-height: 1.3;
    overflow-wrap: break-word;
  }

  .property-parent,
  .property-at,
  .property-type {
    color: var(--color-text-muted);
    font-weight: 500;
  }

  .property-separator {
    color: var(--color-text-muted);
    font-weight: 400;
    margin: 0 0.25rem;
  }

  .property-main {
    color: var(--color-text);
    font-weight: 600;
  }

  .property-date {
    color: var(--color-text-light);
    font-size: 0.875rem;
    font-weight: 500;
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }

  .property-date::before {
    content: 'üìÖ';
    font-size: 0.8em;
  }

  .property-links {
    grid-column: 1/-1;
    display: flex;
    flex-wrap: wrap;
    gap: 0.75rem;
    margin-top: auto;
  }

  .property-link {
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.5rem 1rem;
    border-radius: var(--border-radius-md);
    text-decoration: none;
    font-size: 0.875rem;
    font-weight: 500;
    transition: transform var(--transition-fast), box-shadow var(--transition-fast), background var(--transition-fast);
    border: 1px solid transparent;
  }

  .spec-link {
    background: var(--color-primary);
    color: var(--color-text-white);
  }

  .spec-link:hover {
    background: var(--color-primary-dark);
    transform: translateY(-1px);
    box-shadow: var(--shadow-md);
  }

  .mdn-link {
    background: var(--color-secondary);
    color: var(--color-text-white);
  }

  .mdn-link:hover {
    background: #0284c7;
    transform: translateY(-1px);
    box-shadow: var(--shadow-md);
  }

  .caniuse-link {
    background: var(--color-accent);
    color: var(--color-text-white);
  }

  .caniuse-link:hover {
    background: #d97706;
    transform: translateY(-1px);
    box-shadow: var(--shadow-md);
  }

  /* –¢–µ–º–Ω–∞—è —Ç–µ–º–∞ */
  @media (prefers-color-scheme: dark) {
    .property {
      border: 1px solid rgb(71 85 105 / 30%);
    }

    .property:hover {
      border-color: rgb(99 102 241 / 40%);
    }
  }

  /* –ê–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å */
  @media (width <= 480px) {
    .property {
      column-gap: 0.75rem;
      padding: 1rem;
    }

    .property::after {
      width: 2.5rem;
      height: 2.5rem;
      font-size: 1.25rem;
    }

    .property-name {
      font-size: 1rem;
    }

    .property-links {
      gap: 0.5rem;
    }

    .property-link {
      padding: 0.375rem 0.75rem;
      font-size: 0.8rem;
    }
  }
</style>
