---
import { getLangFromUrl, useTranslations } from '../i18n/utils';

export type PropertyProp = {
  name: string;
  date: string;
  type: string;
  parent?: string | null;
  specUrl?: string;
  mdnUrl?: string;
  year: string;
  baseline?: {
    baseline: string | false;
    baseline_low_date?: string | null;
    baseline_high_date?: string | null;
  };
}

interface Props {
  property: PropertyProp;
}

const { property } = Astro.props;
const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);

function getPropertyIcon(type: string, name: string) {
  if (type === '@') return 'üìã';
  if (name.includes('color') || name.includes('background')) return 'üé®';
  if (name.includes('font') || name.includes('text')) return 'üìù';
  if (name.includes('animation') || name.includes('transition')) return '‚ö°';
  if (name.includes('grid') || name.includes('flex')) return 'üìê';
  if (name.includes('border') || name.includes('outline')) return 'üî≥';
  if (name.includes('margin') || name.includes('padding')) return 'üìè';
  if (name.includes('position') || name.includes('top') || name.includes('left')) return 'üìç';
  return '‚öôÔ∏è';
}

function getBaselineInfo(baseline: PropertyProp['baseline']) {
  if (!baseline || baseline.baseline === false) {
    return { label: 'Limited', class: 'baseline-limited', icon: '‚ö†Ô∏è' };
  }
  
  if (baseline.baseline === 'high') {
    return { label: 'Widely Available', class: 'baseline-high', icon: '‚úÖ' };
  }
  
  if (baseline.baseline === 'low') {
    return { label: 'Newly Available', class: 'baseline-low', icon: 'üÜï' };
  }
  
  return { label: 'Unknown', class: 'baseline-unknown', icon: '‚ùì' };
}

const propertyIcon = getPropertyIcon(property.type, property.name);
const baselineInfo = getBaselineInfo(property.baseline);

const isAtType = property.type === '@';
const hasParent = Boolean(property.parent);

const prefixContent = hasParent ? property.parent : !isAtType ? property.type : null;
const prefixModifier = hasParent ? 'parent' : !isAtType ? 'type' : '';
const prefixClass = prefixContent ? `property-name__prefix property-name__prefix--${prefixModifier}` : '';
---

<article class="property" style={{ '--icon': `'${propertyIcon}'` }}>
  <div class="property-info">
    <h3 class="property-name">
      {prefixContent && <span class={prefixClass}>{prefixContent}</span>}
      <span class="property-name__main">
        {isAtType ? '@' : ''}
        {property.name}
      </span>
    </h3>
    <div class="property-meta">
      <time class="property-date" datetime={property.date}>
        {new Date(property.date).toLocaleDateString(lang === 'ru' ? 'ru-RU' : lang, {
          day: 'numeric',
          month: 'long',
          year: 'numeric'
        })}
      </time>
      {property.baseline && (
        <span class={`baseline-badge ${baselineInfo.class}`} title={`Baseline: ${baselineInfo.label}`}>
          <span class="baseline-badge__icon">{baselineInfo.icon}</span>
          <span class="baseline-badge__label">{baselineInfo.label}</span>
        </span>
      )}
    </div>
  </div>

  <div class="property-links">
    {property.specUrl && (
      <a href={property.specUrl} class="property-link spec-link" target="_blank" rel="noopener">
        üìÑ {t('property.spec')}
      </a>
    )}
    {property.mdnUrl && (
      <a href={property.mdnUrl} class="property-link mdn-link" target="_blank" rel="noopener">
        üìö {t('property.docs')}
      </a>
    )}
    <a href={`https://caniuse.com/?search=${property.name}`} class="property-link caniuse-link" target="_blank" rel="noopener">
      üåê {t('property.browser')}
    </a>
  </div>
</article>

<style>
  .property {
    background: var(--color-background-item);
    border: 1px solid rgb(148 163 184 / 15%);
    border-radius: var(--border-radius-lg);
    box-shadow: var(--shadow-sm);
    transition: transform var(--transition-normal), box-shadow var(--transition-normal), border-color var(--transition-normal);
    overflow: hidden;
    display: grid;
    grid-template-columns: min-content 1fr;
    grid-template-rows: 1fr;
    gap: 2rem 1rem;
    position: relative;
    padding: 1.5rem;
    padding-top: 3rem; /* –†–µ–∑–µ—Ä–≤–∏—Ä—É–µ–º –º–µ—Å—Ç–æ –¥–ª—è baseline –º–µ—Ç–∫–∏ */
  }

  .property::before {
    content: '';
    position: absolute;
    inset: 0 0 auto;
    height: 3px;
    background: linear-gradient(90deg, var(--color-primary), var(--color-secondary));
    opacity: 0%;
    transition: opacity var(--transition-normal);
  }

  .property::after {
    content: var(--icon);
    font-size: 1.5rem;
    background: var(--color-primary);
    width: 2.5rem;
    height: 2.5rem;
    border-radius: var(--border-radius-md);
    display: flex;
    align-items: center;
    justify-content: center;
    flex-shrink: 0;
    box-shadow: var(--shadow-sm);
    order: -1;
  }

  .property:hover {
    transform: translateY(-4px);
    box-shadow: var(--shadow-lg);
    border-color: rgb(79 70 229 / 30%);
  }

  .property:hover::before {
    opacity: 100%;
  }

  .property-info {
    flex: 1;
    min-width: 0;
  }

  .property-name {
    font-weight: 600;
    margin: 0 0 0.5rem;
    color: var(--color-text);
    line-height: 1.3;
  }

  .property-name__prefix {
    color: var(--color-text-muted);
    font-weight: 500;
    position: relative;
  }

  .property-name__prefix::after {
    color: var(--color-text-muted);
    font-weight: 400;
  }

  .property-name__prefix--parent::after {
    content: '‚Üí';
  }

  .property-name__prefix--type::after {
    content: ':';
  }

  .property-name__main {
    color: var(--color-text);
    font-weight: 600;
  }

  .property-meta {
    display: flex;
    align-items: center;
    gap: 1rem;
    flex-wrap: wrap;
  }

  .property-date {
    color: var(--color-text-light);
    font-size: 0.875rem;
    font-weight: 500;
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }

  .property-date::before {
    content: 'üìÖ';
    font-size: 0.8em;
  }

  .baseline-badge {
    position: absolute;
    top: 0.75rem;
    right: 0.75rem;
    display: flex;
    align-items: center;
    justify-content: center;
    width: 1.75rem;
    height: 1.75rem;
    border-radius: 50%;
    font-size: 0.875rem;
    font-weight: 600;
    border: 2px solid transparent;
    transition: all var(--transition-fast);
    z-index: 1;
  }

  .baseline-badge__icon {
    font-size: 1em;
  }

  .baseline-badge__label {
    display: none; /* –°–∫—Ä—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç, –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∏–∫–æ–Ω–∫—É */
  }

  .baseline-high {
    background: linear-gradient(135deg, #10b981, #059669);
    color: white;
    border-color: #047857;
  }

  .baseline-low {
    background: linear-gradient(135deg, #3b82f6, #2563eb);
    color: white;
    border-color: #1d4ed8;
  }

  .baseline-limited {
    background: linear-gradient(135deg, #f59e0b, #d97706);
    color: white;
    border-color: #b45309;
  }

  .baseline-unknown {
    background: linear-gradient(135deg, #6b7280, #4b5563);
    color: white;
    border-color: #374151;
  }

  .baseline-badge:hover {
    transform: translateY(-1px);
    box-shadow: var(--shadow-sm);
  }

  .property-links {
    grid-column: 1/-1;
    display: flex;
    flex-wrap: wrap;
    gap: 0.75rem;
    margin-top: auto;
  }

  .property-link {
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.5rem 1rem;
    border-radius: var(--border-radius-md);
    text-decoration: none;
    font-size: 0.875rem;
    font-weight: 500;
    transition: transform var(--transition-fast), box-shadow var(--transition-fast), background var(--transition-fast);
    border: 1px solid transparent;
  }

  .spec-link {
    background: var(--color-primary);
    color: var(--color-text-white);
  }

  .spec-link:hover {
    background: var(--color-primary-dark);
    transform: translateY(-1px);
    box-shadow: var(--shadow-md);
  }

  .mdn-link {
    background: var(--color-secondary);
    color: var(--color-text-white);
  }

  .mdn-link:hover {
    background: #0284c7;
    transform: translateY(-1px);
    box-shadow: var(--shadow-md);
  }

  .caniuse-link {
    background: var(--color-accent);
    color: var(--color-text-white);
  }

  .caniuse-link:hover {
    background: #d97706;
    transform: translateY(-1px);
    box-shadow: var(--shadow-md);
  }

  /* –¢–µ–º–Ω–∞—è —Ç–µ–º–∞ */
  @media (prefers-color-scheme: dark) {
    .property {
      border: 1px solid rgb(71 85 105 / 30%);
    }

    .property:hover {
      border-color: rgb(99 102 241 / 40%);
    }
  }

  /* –ê–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å */
  @media (width <= 480px) {
    .property {
      column-gap: 0.75rem;
      padding: 1rem;
    }

    .property::after {
      width: 2.5rem;
      height: 2.5rem;
      font-size: 1.25rem;
    }

    .property-name {
      font-size: 1rem;
    }

    .property-meta {
      gap: 0.75rem;
    }

    .baseline-badge {
      width: 1.5rem;
      height: 1.5rem;
      font-size: 0.75rem;
    }

    .property-links {
      gap: 0.5rem;
    }

    .property-link {
      padding: 0.375rem 0.75rem;
      font-size: 0.8rem;
    }
  }
</style>
