---
import { data } from '../data/data.js';
import { getLangFromUrl, useTranslations } from '../i18n/utils';

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);

// Подготавливаем данные для графика
const years = Object.keys(data).sort((a, b) => parseInt(b) - parseInt(a));
const yearData = years.map(year => ({
  year: parseInt(year),
  count: data[year].length,
  features: data[year]
}));

// Находим максимальное количество для масштабирования
const maxCount = Math.max(...yearData.map(item => item.count));

// Получаем начальный и конечный годы для подзаголовка
const startYear = Math.min(...yearData.map(item => item.year));
const endYear = Math.max(...yearData.map(item => item.year));

// Создаем подзаголовок с подстановкой значений
const subtitle = t('yearly.chart.subtitle').replace('{start}', startYear.toString()).replace('{end}', endYear.toString());
---

<section class="yearly-chart">
  <h2 class="chart-title">{t('yearly.chart.title')}</h2>
  <p class="chart-subtitle">{subtitle}</p>

  <div class="chart-controls" role="group" aria-label="Сортировка">
    <button class="sort-button active" id="sortByYear" title="Сортировать по годам" aria-pressed="true" aria-label="Сортировать по годам">
      <svg viewBox="0 0 24 24" aria-hidden="true">
        <rect x="3" y="8" width="3" height="10" rx="1" fill="currentColor"></rect>
        <rect x="8.5" y="4" width="3" height="14" rx="1" fill="currentColor"></rect>
        <rect x="14" y="12" width="3" height="6" rx="1" fill="currentColor"></rect>
        <rect x="19.5" y="6" width="3" height="12" rx="1" fill="currentColor"></rect>
      </svg>
    </button>
    <button class="sort-button" id="sortByCount" title="Сортировать по количеству" aria-pressed="false" aria-label="Сортировать по количеству">
      <svg viewBox="0 0 24 24" aria-hidden="true">
        <rect x="3" y="4" width="3" height="14" rx="1" fill="currentColor"></rect>
        <rect x="8.5" y="7" width="3" height="11" rx="1" fill="currentColor"></rect>
        <rect x="14" y="10" width="3" height="8" rx="1" fill="currentColor"></rect>
        <rect x="19.5" y="13" width="3" height="5" rx="1" fill="currentColor"></rect>
      </svg>
    </button>
  </div>

  <div class="chart-content">
    <div class="chart-bars">
      {yearData.map((item, index) => (
        <a href={`#year-${item.year}`} class="bar-container" data-year={item.year} data-count={item.count} style={`--bar-height: ${(item.count / maxCount) * 100}%; --delay: ${index * 0.05}s`}>
          <div class="bar">
            <div class="bar-fill" data-count={item.count}></div>
          </div>
          <div class="bar-label">
            <span class="year">{item.year}</span>
            <span class="count">{item.count}</span>
          </div>
        </a>
      ))}
    </div>
  </div>

  <div class="chart-stats">
    <div class="stat">
      <span class="stat-label">{t('yearly.chart.totalYears')}</span>
      <span class="stat-value">{years.length}</span>
    </div>
    <div class="stat">
      <span class="stat-label">{t('yearly.chart.totalFeatures')}</span>
      <span class="stat-value">{Object.values(data).flat().length}</span>
    </div>
    <div class="stat">
      <span class="stat-label">{t('yearly.chart.mostActiveYear')}</span>
      <span class="stat-value">{yearData.reduce((max, item) => item.count > max.count ? item : max).year}</span>
    </div>
  </div>
</section>

<style>
  .yearly-chart {
    margin-bottom: 4rem;
    padding: 3rem 2rem;
    background: var(--color-background-overlay);
    border-radius: var(--border-radius-xl);
    backdrop-filter: blur(20px);
    border: 1px solid rgb(148 163 184 / 20%);
    box-shadow: var(--shadow-xl);
    position: relative;
    overflow: visible;
  }

  .chart-title {
    text-align: center;
    font-size: 2rem;
    font-weight: 700;
    margin: 0 0 0.5rem;
    background: linear-gradient(135deg, var(--color-primary) 0%, var(--color-secondary) 100%);
    background-clip: text;
    -webkit-text-fill-color: transparent;
  }

  .chart-subtitle {
    font-size: 1rem;
    text-align: center;
    color: var(--color-text-light);
    margin: 0;
    margin-bottom: 3rem;
  }

  .chart-content {
    position: relative;
    height: 300px;
    background: rgb(255 255 255 / 2%);
    border-radius: var(--border-radius-lg);
    padding: 3rem 2rem 2rem;
    border: 1px solid rgb(148 163 184 / 10%);
    overflow: visible;
    margin-bottom: 2rem;
  }

  .chart-controls {
    display: flex;
    justify-content: flex-end;
    gap: 0.5rem;
    margin: 0 0 1rem;
  }

  .sort-button {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    padding: 0.5rem;
    border-radius: 0.5rem;
    border: 1px solid rgb(148 163 184 / 30%);
    background: rgb(255 255 255 / 40%);
    color: var(--color-text);
    cursor: pointer;
    transition: background 0.2s ease, border-color 0.2s ease, transform 0.1s ease, box-shadow 0.2s ease;
  }

  .sort-button:hover {
    background: rgb(255 255 255 / 60%);
  }

  .sort-button.active {
    border-color: var(--color-primary);
    box-shadow: 0 0 0 2px rgb(79 70 229 / 20%);
  }

  .sort-button svg {
    width: 20px;
    height: 20px;
  }

  .chart-bars {
    display: flex;
    align-items: end;
    height: calc(100% + 30px);
    padding-top: 30px;
    gap: 0.5rem;
    overflow-x: auto;
    padding-bottom: 2rem;
    scrollbar-width: thin;
    scrollbar-color: var(--color-primary) transparent;
  }

  .chart-bars::-webkit-scrollbar {
    height: 6px;
  }

  .chart-bars::-webkit-scrollbar-track {
    background: rgb(148 163 184 / 10%);
    border-radius: 3px;
  }

  .chart-bars::-webkit-scrollbar-thumb {
    background: var(--color-primary);
    border-radius: 3px;
  }

  .bar-container {
    flex: 0 0 auto;
    min-width: 40px;
    height: 100%;
    display: flex;
    flex-direction: column;
    align-items: center;
    position: relative;
    cursor: pointer;
    transition: transform 0.2s ease;
    text-decoration: none;
    color: inherit;
  }

  .bar-container:hover {
    transform: translateY(-2px);
  }

  .bar {
    width: 100%;
    height: 100%;
    display: flex;
    align-items: end;
    position: relative;
  }

  .bar-fill {
    width: 100%;
    height: var(--bar-height);
    background: linear-gradient(
      135deg,
      var(--color-primary) 0%,
      var(--color-secondary) 100%
    );
    border-radius: 4px 4px 0 0;
    opacity: 100%;
    position: relative;
    transition: box-shadow 0.3s ease;
  }

  .bar-fill::before {
    content: attr(data-count);
    position: absolute;
    top: -1.5rem;
    left: 50%;
    transform: translateX(-50%);
    font-size: 0.75rem;
    font-weight: 600;
    color: var(--color-text);
    opacity: 0%;
    transition: opacity 0.3s ease;
  }

  .bar-container:hover .bar-fill::before {
    opacity: 100%;
  }

  .bar-container:hover .bar-fill {
    box-shadow: 0 4px 12px rgb(79 70 229 / 30%);
  }

  .bar-label {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 0.25rem;
    margin-top: 0.5rem;
    min-height: 2.5rem;
  }

  .year {
    font-size: 0.8rem;
    font-weight: 600;
    color: var(--color-text);
    text-align: center;
  }

  .count {
    font-size: 0.7rem;
    color: var(--color-text-muted);
    font-weight: 500;
  }

  .chart-stats {
    display: flex;
    justify-content: center;
    gap: 3rem;
    flex-wrap: wrap;
    padding: 1.5rem;
    background: rgb(255 255 255 / 2%);
    border-radius: var(--border-radius-lg);
    border: 1px solid rgb(148 163 184 / 10%);
  }

  .stat {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 0.5rem;
  }

  .stat-label {
    font-size: 0.85rem;
    color: var(--color-text-muted);
    text-transform: uppercase;
    letter-spacing: 0.05em;
    font-weight: 500;
  }

  .stat-value {
    font-size: 1.5rem;
    font-weight: 700;
    color: var(--color-primary);
  }



  /* Темная тема */
  @media (prefers-color-scheme: dark) {
    .yearly-chart {
      border: 1px solid rgb(71 85 105 / 30%);
    }

    .chart-content,
    .chart-stats {
      border: 1px solid rgb(71 85 105 / 20%);
    }

    .sort-button {
      background: rgb(15 23 42 / 40%);
      border: 1px solid rgb(71 85 105 / 40%);
    }

    .sort-button:hover {
      background: rgb(15 23 42 / 60%);
    }
  }
</style>

<script is:inline>
  document.addEventListener('DOMContentLoaded', () => {
    const barsContainer = document.querySelector('.chart-bars');
    if (!barsContainer) return;

    const sortByYearBtn = document.getElementById('sortByYear');
    const sortByCountBtn = document.getElementById('sortByCount');

    const nodes = Array.from(barsContainer.children);
    const sortByYearNodes = [...nodes].sort((a, b) => parseInt(b.getAttribute('data-year')) - parseInt(a.getAttribute('data-year')));
    const sortByCountNodes = [...nodes].sort((a, b) => {
      const diff = parseInt(b.getAttribute('data-count')) - parseInt(a.getAttribute('data-count'));
      return diff !== 0 ? diff : (parseInt(b.getAttribute('data-year')) - parseInt(a.getAttribute('data-year')));
    });

    function applyOrder(ordered) {
      ordered.forEach((node, idx) => {
        node.style.setProperty('--delay', `${idx * 0.05}s`);
        barsContainer.appendChild(node);
      });
    }

    function setActive(activeBtn) {
      [sortByYearBtn, sortByCountBtn].forEach(btn => {
        if (!btn) return;
        const isActive = btn === activeBtn;
        btn.classList.toggle('active', isActive);
        btn.setAttribute('aria-pressed', String(isActive));
      });
    }

    sortByYearBtn?.addEventListener('click', () => {
      applyOrder(sortByYearNodes);
      setActive(sortByYearBtn);
    });

    sortByCountBtn?.addEventListener('click', () => {
      applyOrder(sortByCountNodes);
      setActive(sortByCountBtn);
    });
  });
</script>
